import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ClickEvent } from '../../interfaces/click-event.interface';
import { HoverRatingChangeEvent } from '../../interfaces/hover-rating-change-event.interface';
import { RatingChangeEvent } from '../../interfaces/rating-change-event.interface';
import { StarRating } from '../../services/star-rating';
import { StarRatingConfigService } from '../../services/star-rating-config.service';
import * as ɵngcc0 from '@angular/core';
export declare class StarRatingControlComponent extends StarRating implements ControlValueAccessor {
    starClickChange: EventEmitter<ClickEvent>;
    ratingChange: EventEmitter<RatingChangeEvent>;
    hoverRatingChange: EventEmitter<HoverRatingChangeEvent>;
    onTouch: Function;
    onModelChange: Function;
    private onModelChangeRegistered;
    private onTouchRegistered;
    saveOnClick($event: ClickEvent): void;
    saveOnRatingChange($event: RatingChangeEvent): void;
    saveOnHover($event: HoverRatingChangeEvent): void;
    saveOnTouch(): void;
    saveOnModelChange(value: number): void;
    /**ACCESSIBILITY **/
    onKeyDown(event: KeyboardEvent): void;
    onBlur(event: FocusEvent): void;
    onFocus(event: FocusEvent): void;
    onStarHover(rating?: number): void;
    /**Form Control - ControlValueAccessor implementation**/
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    constructor(config: StarRatingConfigService);
    setRating(value: number): void;
    /**
     * onStarClicked
     *
     * Is fired when a star is clicked. And updated the rating value.
     * This function returns if the disabled or readOnly
     * property is set. If provided it emits the onClick event
     * handler with the actual rating value.
     *
     * @param rating
     */
    onStarClicked(rating: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StarRatingControlComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StarRatingControlComponent, "star-rating-control", never, { "getHalfStarVisible": "getHalfStarVisible"; "getColor": "getColor"; "showHalfStars": "showHalfStars"; "hoverEnabled": "hoverEnabled"; "rating": "rating"; "step": "step"; "disabled": "disabled"; "readOnly": "readOnly"; "space": "space"; "starType": "starType"; "size": "size"; "speed": "speed"; "numOfStars": "numOfStars"; "direction": "direction"; "staticColor": "staticColor"; "labelPosition": "labelPosition"; "labelText": "labelText"; "id": "id"; }, { "starClickChange": "starClickChange"; "ratingChange": "ratingChange"; "hoverRatingChange": "hoverRatingChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmctY29udHJvbC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3Rhci1yYXRpbmctY29udHJvbC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ2xpY2tFdmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvY2xpY2stZXZlbnQuaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvaG92ZXItcmF0aW5nLWNoYW5nZS1ldmVudC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBSYXRpbmdDaGFuZ2VFdmVudCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcmF0aW5nLWNoYW5nZS1ldmVudC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBTdGFyUmF0aW5nIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvc3Rhci1yYXRpbmcnO1xyXG5pbXBvcnQgeyBTdGFyUmF0aW5nQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3N0YXItcmF0aW5nLWNvbmZpZy5zZXJ2aWNlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RhclJhdGluZ0NvbnRyb2xDb21wb25lbnQgZXh0ZW5kcyBTdGFyUmF0aW5nIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xyXG4gICAgc3RhckNsaWNrQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2xpY2tFdmVudD47XHJcbiAgICByYXRpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxSYXRpbmdDaGFuZ2VFdmVudD47XHJcbiAgICBob3ZlclJhdGluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPEhvdmVyUmF0aW5nQ2hhbmdlRXZlbnQ+O1xyXG4gICAgb25Ub3VjaDogRnVuY3Rpb247XHJcbiAgICBvbk1vZGVsQ2hhbmdlOiBGdW5jdGlvbjtcclxuICAgIHByaXZhdGUgb25Nb2RlbENoYW5nZVJlZ2lzdGVyZWQ7XHJcbiAgICBwcml2YXRlIG9uVG91Y2hSZWdpc3RlcmVkO1xyXG4gICAgc2F2ZU9uQ2xpY2soJGV2ZW50OiBDbGlja0V2ZW50KTogdm9pZDtcclxuICAgIHNhdmVPblJhdGluZ0NoYW5nZSgkZXZlbnQ6IFJhdGluZ0NoYW5nZUV2ZW50KTogdm9pZDtcclxuICAgIHNhdmVPbkhvdmVyKCRldmVudDogSG92ZXJSYXRpbmdDaGFuZ2VFdmVudCk6IHZvaWQ7XHJcbiAgICBzYXZlT25Ub3VjaCgpOiB2b2lkO1xyXG4gICAgc2F2ZU9uTW9kZWxDaGFuZ2UodmFsdWU6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipBQ0NFU1NJQklMSVRZICoqL1xyXG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcclxuICAgIG9uQmx1cihldmVudDogRm9jdXNFdmVudCk6IHZvaWQ7XHJcbiAgICBvbkZvY3VzKGV2ZW50OiBGb2N1c0V2ZW50KTogdm9pZDtcclxuICAgIG9uU3RhckhvdmVyKHJhdGluZz86IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKipGb3JtIENvbnRyb2wgLSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbXBsZW1lbnRhdGlvbioqL1xyXG4gICAgd3JpdGVWYWx1ZShvYmo6IGFueSk6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFN0YXJSYXRpbmdDb25maWdTZXJ2aWNlKTtcclxuICAgIHNldFJhdGluZyh2YWx1ZTogbnVtYmVyKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogb25TdGFyQ2xpY2tlZFxyXG4gICAgICpcclxuICAgICAqIElzIGZpcmVkIHdoZW4gYSBzdGFyIGlzIGNsaWNrZWQuIEFuZCB1cGRhdGVkIHRoZSByYXRpbmcgdmFsdWUuXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgaWYgdGhlIGRpc2FibGVkIG9yIHJlYWRPbmx5XHJcbiAgICAgKiBwcm9wZXJ0eSBpcyBzZXQuIElmIHByb3ZpZGVkIGl0IGVtaXRzIHRoZSBvbkNsaWNrIGV2ZW50XHJcbiAgICAgKiBoYW5kbGVyIHdpdGggdGhlIGFjdHVhbCByYXRpbmcgdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJhdGluZ1xyXG4gICAgICovXHJcbiAgICBvblN0YXJDbGlja2VkKHJhdGluZzogbnVtYmVyKTogdm9pZDtcclxufVxyXG4iXX0=